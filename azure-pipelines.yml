# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

#pool:
#  vmImage: 'Ubuntu 16.04'
#
#variables:
#  imageName: 'in3-demo-build'
#
#steps:
#- script: docker build -f 'IN3.Demo.Api/Dockerfile' -t $(imageName) .
#  displayName: 'docker build'
#- script: dotnet test IN3.Demo.ApiTest/IN3.Demo.ApiTest.csproj
#  displayName: 'Unit test'
#- script: az acr login --name DevOpsDemoReg --password 'JDdgUIHTCgcWcMRwnSD9y/Zmd9B8MVkz'


# Build Docker image for this app using Azure Pipelines
# http://docs.microsoft.com/azure/devops/pipelines/languages/docker?view=vsts
pool:
  vmImage: 'Ubuntu 16.04'

variables:
  buildConfiguration: 'Release'
  imageName: 'dotnetcore:$(Build.BuildId)'
  # define two more variables dockerId and dockerPassword in the build pipeline in UI

steps:
- script: |
    dotnet build --configuration $(buildConfiguration)
    dotnet test dotnetcore-tests --configuration $(buildConfiguration) --logger trx
    dotnet publish --configuration $(buildConfiguration) --output out
    docker build -f 'IN3.Demo.Api/Dockerfile' -t $(dockerId).azurecr.io/$(imageName) .
    docker login -u $(dockerId) -p $pswd $(dockerid).azurecr.io
    docker push $(dockerId).azurecr.io/$(imageName)
  env:
    pswd: $(dockerPassword)
  displayName: 'docker build'

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

#- script: |
#    docker-compose -f docs/docker-compose.yml --project-directory . -p docs up -d |
#    docker wait docs_sut_1 |
#    docker-compose -f docs/docker-compose.yml --project-directory . down
